import './style.scss';
import { EventModel, PageNumberTransformer, PaginationConfigModel, addButtonsPropertiesModel, hiddenButtonsConfigModel } from './interfaces';
export declare class Pagination {
    component: HTMLElement;
    paginationWrapperSelector: string;
    paginationWrapper: HTMLElement | undefined;
    dynamicElementSelector: string;
    dynamicElements: HTMLElement[];
    openedElements: HTMLElement[];
    previousButtonInner: string;
    nextButtonInner: string;
    itemsPerPage: number;
    previousButtonClassnames: string[];
    nextButtonClassnames: string[];
    regularButtonClassnames: string[];
    url: URL;
    currentPage: number;
    totalPages: number;
    buttons: HTMLElement[];
    prevButton: HTMLElement | undefined;
    nextButton: HTMLElement | undefined;
    emptyMapInner: string;
    buttonsMap: any[];
    dynamicItemSelector: any;
    hiddenButtons: hiddenButtonsConfigModel;
    pageNumberTransformer: PageNumberTransformer;
    devMode: boolean;
    on: EventModel;
    constructor(component: string | HTMLElement | undefined, { paginationWrapperSelector, dynamicElementSelector, previousButtonInner, nextButtonInner, previousButtonClassnames, nextButtonClassnames, regularButtonClassnames, itemsPerPage, emptyMapInner, pageNumberTransformer, hiddenButtons, on, devMode: developmentMode, }: PaginationConfigModel);
    init: () => void;
    initVariables: () => void;
    createButtonsMap: () => void;
    addCustomButtons: () => void;
    addButton: ({ content, label }: addButtonsPropertiesModel) => void;
    updateButtonsAttrs: () => void;
    makeDisable: (button: HTMLElement) => void;
    makeEnable: (button: HTMLElement) => void;
    update: () => void;
    goToCurrent: () => void;
    addPageParam: () => void;
    clickHandler: (event: MouseEvent) => void;
    addRelLinks: () => void;
}
